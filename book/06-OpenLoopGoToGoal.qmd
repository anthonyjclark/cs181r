---
title: "Open-Loop Go-To-Goal"
execute:
  echo: false
---

Some introductory text.

“Ask engaging questions that spark people’s curiosity and fascination that people find intriguing…”

## What you will learn

- A list of 2 to 5 learning goals

## Terminology

a list
: of new terms

## Lecture

Links

- [Slides (PPTX)](../_static/lectures/)
- [Slides (PDF)](../_static/lectures/)
- [Google sheet](https://docs.google.com/spreadsheets/d/1HJmlehaYhGWclDo1t0k6i1VHxN15zr8ZmJj7Rf_VEaI/edit?gid=1242365109#gid=1242365109)

A video of slides, coding, hands-on electronics, etc.

- heart beat
  - delete communications/.packages
  - introduce communications demo
  - try to run without install
  - `jag pkg install`
  - then run demo
  - web sockets
  - Toit
- go to goal
  - open loop
  - vs. closed loop

## Interactive

Add a interactive with a bit of randomness.

```{ojs}
div_id = "interactive-container"

graph_style = `
    width: ${width}px;
    height: ${width}px;
    user-select: none;
    overflow: hidden;
    position: relative;
    touch-action: none;
    background-color: #f5f5f5;
    border: solid #DDD 1px;
    border-style: solid;
    border-radius: 10px;
    margin: 0;
`
viewof graph = html`<div id="${div_id}" style="${graph_style}"></div>`
```

```{ojs}
import { WMRGraph } from '../_interactives/WMRGraph/dist/wmr-graph.js';

function updateRotation( phi ) { }

function updateTranslation( x, y ) { }

// TODO: use correct values
r = 0.1;
d = 0.07;

mutable ur = 20;
mutable ul = 19.9;

// TODO: simulate from t=0 to t=time on each call to update
// TODO: add caching

simulate = ( time ) => {

  let t = 0;

  let phi = 0;
  let x = 0;
  let y = 0;

  let xdot = r * ( ur + ul ) * Math.cos( 0 ) / 2;
  let ydot = r * ( ur + ul ) * Math.sin( 0 ) / 2;
  const phidot = r * ( ur - ul ) / ( 2 * d );

  while ( t < time ) {

    t += timeStep;

    x = x + xdot * timeStep;
    y = y + ydot * timeStep;
    phi = phi + phidot * timeStep;

    xdot = r * ( ur + ul ) * Math.cos( phi ) / 2;
    ydot = r * ( ur + ul ) * Math.sin( phi ) / 2;

  }

  return [ x, y, phi ];

};

restart = () => {

  mutable ur = 20 + ( Math.random() - 0.5 ) * 0.2;
  mutable ul = 20 + ( Math.random() - 0.5 ) * 0.2;

};

duration = 10;
timeStep = 0.05;

wmr = new WMRGraph( 'interactive-container', updateRotation, updateTranslation );
wmr.addPlayerControls( duration, timeStep, simulate, restart);
```

## Exercise

Intro...

- spreadsheet

You will submit your responses on gradescope. **Only one partner should submit.** The submitter will add the other partner through the gradescope interface.

Additional details for using gradescope can be found here:

- [Submitting an Assignment](https://help.gradescope.com/article/ccbpppziu9-student-submit-work)
- [Adding Group Members](https://help.gradescope.com/article/m5qz2xsnjy-student-add-group-members)
- [gradescope Student Help Center](https://help.gradescope.com/category/cyk4ij2dwi-student-workflow)

You should open the gradescope assignment now so that you know what to work complete.

### Grading

I will grade all exercises using a scale of "Nailed It" / "Not Yet". See the course [grading policy](../index.qmd#grading) for more information, and check gradescope for deadlines.

### Overview

### Tasks

## Wrap-Up

## Resources
